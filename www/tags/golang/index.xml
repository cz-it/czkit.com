<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on CZKit</title>
    <link>http://www.czkit.com/tags/golang/</link>
    <description>Recent content in Golang on CZKit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 03 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.czkit.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debug Golang With Delve</title>
      <link>http://www.czkit.com/posts/golang/debug/delve_try/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.czkit.com/posts/golang/debug/delve_try/</guid>
      <description>&lt;p&gt;Golang在其官方&lt;a href=&#34;https://golang.google.cn/doc/gdb&#34;&gt;文档&lt;/a&gt; 说明&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that Delve is a better alternative to GDB when debugging Go programs built with the standard toolchain. It understands the Go runtime, data structures, and expressions better than GDB. Delve currently supports Linux, OSX, and Windows on amd64. For the most up-to-date list of supported platforms, please see the Delve documentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相比于GDB，Delve更适合于Golang程序的Debug操作，为了这句官方的推荐，我们也应该去尝试一下Delve。当前Delve可以支持Linux/OSX/Windows这几个主流平台，基本可以替代GDB的使用。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debugging Go Code with GDB [译]</title>
      <link>http://www.czkit.com/posts/golang/translate/debugging_go_code_with_gdb/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.czkit.com/posts/golang/translate/debugging_go_code_with_gdb/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;一篇很老的文章，最近翻来看，好像也没人翻译，随手翻译一遍，文章来自&lt;a href=&#34;https://golang.google.cn/doc/gdb&#34;&gt;Golang&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下说明适用于Golang的标准工具链（Go编译器如gc以及其他工具），GccGo有他自己的gdb支持。&lt;/p&gt;

&lt;p&gt;需要注意的是，对于使用标准工具链构建的Golang来说&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;Delve&lt;/a&gt;相比如GDB是一个更好的选择，Delve可以更好的理解Go的运行时、数据结构以及表达式等。当前Delve可以支持Linux、OSX以及arm64平台下的Windows，最新能支持的平台列表参见&lt;a href=&#34;https://github.com/derekparker/delve/tree/master/Documentation/installation&#34;&gt;Delve的文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GDB并不能很好理解Go程序，比如栈管理、线程以及包含了和传统GDB执行模型不一样的运行时，即便是通过gccgo来编译的程序有时候也会产生让人迷惑的信息。总的来说，虽然GDB可以在一些场景（如调试Cgo代码或者调试运行时）起到定位问题的作用，但它不是Go赖以生存的调试器，尤其是对于并发场景。或者说GDB不是Go程序首选的调试器。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Golang的官方mock工具--gomock</title>
      <link>http://www.czkit.com/posts/golang/mock/test_with_gomock/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.czkit.com/posts/golang/mock/test_with_gomock/</guid>
      <description>&lt;p&gt;在Golang的官方Repo(&lt;a href=&#34;https://github.com/golang/&#34;&gt;https://github.com/golang/&lt;/a&gt;) 中有一个单独的工程叫&amp;rdquo;mock&amp;rdquo;(&lt;a href=&#34;https://github.com/golang/mock&#34;&gt;https://github.com/golang/mock&lt;/a&gt;) ,虽然star不是特别多，但它却是Golang官方放出来的mock工具，冲这这点我们也需要使用下，虽然并不是官方的就是最好（比如比标准库http更快的fasthttp）。&lt;/p&gt;

&lt;p&gt;不同场景mock的对象互相不同，那么gomock主要是mock哪些内容呢？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;mockgen has two modes of operation: source and reflect. Source mode generates mock interfaces from a source file.
Reflect mode generates mock interfaces by building a program that uses reflection to understand interfaces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过gomock的辅助工具我们知道，gomock主要是针对我们go代码中的接口进行mock的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>